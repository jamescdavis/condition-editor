{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","condition-editor/tests/acceptance/application-test.js","condition-editor/tests/helpers/ember-power-select.js","condition-editor/tests/helpers/input-type.js","condition-editor/tests/helpers/select.js","condition-editor/tests/in-run-loop.d.js","condition-editor/tests/integration/components/condition-editor-test.js","condition-editor/tests/integration/components/operator-chooser-test.js","condition-editor/tests/integration/components/product-table-test.js","condition-editor/tests/integration/components/property-chooser-test.js","condition-editor/tests/test-helper.js","condition-editor/tests/unit/controllers/application-test.js","condition-editor/tests/unit/instance-initializers/load-operator-names-test.js","condition-editor/tests/unit/lib/operator-test.js","condition-editor/tests/unit/models/product-test.js","condition-editor/tests/unit/models/property-test.js","condition-editor/tests/unit/models/property-value-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"condition-editor/tests/acceptance/application-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support\", \"condition-editor/mirage/util\", \"condition-editor/tests/helpers/select\", \"condition-editor/lib/operator\"], function (_qunit, _testHelpers, _emberQunit, _testSupport, _util, _select, _operator) {\n  \"use strict\";\n\n  async function input(value) {\n    await (0, _testHelpers.fillIn)('[data-test-input]', value);\n    await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n  }\n\n  (0, _qunit.module)('Acceptance | application', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _testSupport.setupMirage)(hooks);\n    hooks.beforeEach(async function () {\n      (0, _util.loadProperties)(this.server);\n      (0, _util.loadProducts)(this.server);\n      this.store = this.owner.lookup('service:store');\n      this.properties = await this.store.findAll('property');\n\n      this.chooseProperty = async name => {\n        const list = this.properties.toArray().filter(property => property.name === name);\n\n        if (list.length > 0) {\n          await (0, _select.selectProperty)(list[0]);\n        }\n      };\n    });\n    (0, _qunit.test)('visiting /', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.dom('[data-test-product-row]').exists({\n        count: 6\n      });\n      await this.chooseProperty('Product Name');\n      await (0, _select.selectOperator)(_operator.Id.Eq);\n      await input('Cell Phone');\n      assert.dom('[data-test-product-row]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row]').containsText('Cell Phone');\n      await input('Key');\n      assert.dom('[data-test-product-row]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row]').containsText('Key');\n      await (0, _select.selectOperator)(_operator.Id.Any);\n      assert.dom('[data-test-product-row]').exists({\n        count: 6\n      });\n      await (0, _select.selectOperator)(_operator.Id.None);\n      assert.dom('[data-test-product-row]').doesNotExist();\n      await (0, _select.selectOperator)(_operator.Id.In);\n      await input('Key');\n      assert.dom('[data-test-product-row]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row]').containsText('Key');\n      await input('Key, Cup');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      await input(', Key');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await input('Key,');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await input('Key,,Cup');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _select.selectOperator)(_operator.Id.Contains);\n      await input('key');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      assert.dom('[data-test-product-row]').containsText('Key');\n      await (0, _testHelpers.click)('[data-test-clear-button]');\n      assert.dom('[data-test-product-row]').exists({\n        count: 6\n      });\n      await this.chooseProperty('weight (oz)');\n      await (0, _select.selectOperator)(_operator.Id.Eq);\n      assert.dom('[data-test-product-row]').exists({\n        count: 6\n      });\n      await input('3');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      await input('19');\n      assert.dom('[data-test-product-row]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row]').containsText('Hammer');\n      await input('1.0');\n      assert.dom('[data-test-product-row]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row]').containsText('Key');\n      await input('foo');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      assert.dom('[data-test-product-row]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row]').containsText('Key');\n      await (0, _select.selectOperator)(_operator.Id.Gt);\n      await input('0');\n      assert.dom('[data-test-product-row]').exists({\n        count: 6\n      });\n      await input('1');\n      assert.dom('[data-test-product-row]').exists({\n        count: 5\n      });\n      await input('0.9');\n      assert.dom('[data-test-product-row]').exists({\n        count: 6\n      });\n      await (0, _select.selectOperator)(_operator.Id.Lt);\n      await input('0');\n      assert.dom('[data-test-product-row]').exists({\n        count: 0\n      });\n      await input('5');\n      assert.dom('[data-test-product-row]').exists({\n        count: 3\n      });\n      await input('0.9');\n      assert.dom('[data-test-product-row]').exists({\n        count: 0\n      });\n      await input('10');\n      assert.dom('[data-test-product-row]').exists({\n        count: 5\n      });\n      await (0, _select.selectOperator)(_operator.Id.Any);\n      assert.dom('[data-test-product-row]').exists({\n        count: 6\n      });\n      await (0, _select.selectOperator)(_operator.Id.None);\n      assert.dom('[data-test-product-row]').exists({\n        count: 0\n      });\n      await (0, _select.selectOperator)(_operator.Id.In);\n      await input('19');\n      assert.dom('[data-test-product-row]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row]').containsText('Hammer');\n      await input('1, 19');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      await input('1, a, 5');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await input('1, ,5');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await input(',1,5');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await input('1,5,');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await this.chooseProperty('wireless');\n      assert.dom('[data-test-product-row]').exists({\n        count: 6\n      });\n      await (0, _select.selectOperator)(_operator.Id.Eq);\n      assert.dom('[data-test-product-row]').exists({\n        count: 6\n      });\n      await (0, _testHelpers.click)('[data-test-input-box] .ember-power-select-trigger');\n      await (0, _testHelpers.click)('[data-test-single-select-input=\"true\"]');\n      assert.dom('[data-test-product-row]').exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)('[data-test-input-box] .ember-power-select-trigger');\n      await (0, _testHelpers.click)('[data-test-single-select-input=\"false\"]');\n      assert.dom('[data-test-product-row]').exists({\n        count: 2\n      });\n      await (0, _select.selectOperator)(_operator.Id.Any);\n      assert.dom('[data-test-product-row]').exists({\n        count: 3\n      });\n      await (0, _select.selectOperator)(_operator.Id.None);\n      assert.dom('[data-test-product-row]').exists({\n        count: 3\n      });\n      await (0, _select.selectOperator)(_operator.Id.In);\n      await (0, _testHelpers.click)('[data-test-input-box] .ember-power-select-trigger');\n      await (0, _testHelpers.click)('[data-test-multi-select-input=\"true\"]');\n      assert.dom('[data-test-product-row]').exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)('[data-test-input-box] .ember-power-select-trigger');\n      await (0, _testHelpers.click)('[data-test-multi-select-input=\"false\"]');\n      assert.dom('[data-test-product-row]').exists({\n        count: 3\n      });\n    });\n  });\n});","define(\"condition-editor/tests/helpers/ember-power-select\", [\"exports\", \"ember-power-select/test-support/helpers\"], function (_exports, _helpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = deprecatedRegisterHelpers;\n  _exports.selectChoose = _exports.touchTrigger = _exports.nativeTouch = _exports.clickTrigger = _exports.typeInSearch = _exports.triggerKeydown = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;\n\n  function deprecateHelper(fn, name) {\n    return function (...args) {\n      (true && !(false) && Ember.deprecate(`DEPRECATED \\`import { ${name} } from '../../tests/helpers/ember-power-select';\\` is deprecated. Please, replace it with \\`import { ${name} } from 'ember-power-select/test-support/helpers';\\``, false, {\n        until: '1.11.0',\n        id: `ember-power-select-test-support-${name}`\n      }));\n      return fn(...args);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  _exports.findContains = findContains;\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  _exports.nativeMouseDown = nativeMouseDown;\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  _exports.nativeMouseUp = nativeMouseUp;\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  _exports.triggerKeydown = triggerKeydown;\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  _exports.typeInSearch = typeInSearch;\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  _exports.clickTrigger = clickTrigger;\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  _exports.nativeTouch = nativeTouch;\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  _exports.touchTrigger = touchTrigger;\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n  _exports.selectChoose = selectChoose;\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, {\n      until: '1.11.0',\n      id: 'ember-power-select-test-support-register-helpers'\n    }));\n    return (0, _helpers.default)();\n  }\n});","define(\"condition-editor/tests/helpers/input-type\", [\"exports\", \"condition-editor/lib/operator\", \"condition-editor/models/property\"], function (_exports, _operator, _property) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.assertsForInputType = assertsForInputType;\n  _exports.expectedInputTypes = _exports.InputType = void 0;\n  let InputType;\n  _exports.InputType = InputType;\n\n  (function (InputType) {\n    InputType[InputType[\"None\"] = 0] = \"None\";\n    InputType[InputType[\"Text\"] = 1] = \"Text\";\n    InputType[InputType[\"SingleSelect\"] = 2] = \"SingleSelect\";\n    InputType[InputType[\"MultiSelect\"] = 3] = \"MultiSelect\";\n  })(InputType || (_exports.InputType = InputType = {}));\n\n  const expectedInputTypes = {\n    [_property.PropertyType.String]: {\n      [_operator.Id.Eq]: InputType.Text,\n      [_operator.Id.Any]: InputType.None,\n      [_operator.Id.None]: InputType.None,\n      [_operator.Id.In]: InputType.Text,\n      [_operator.Id.Contains]: InputType.Text\n    },\n    [_property.PropertyType.Number]: {\n      [_operator.Id.Eq]: InputType.Text,\n      [_operator.Id.Gt]: InputType.Text,\n      [_operator.Id.Lt]: InputType.Text,\n      [_operator.Id.Any]: InputType.None,\n      [_operator.Id.None]: InputType.None,\n      [_operator.Id.In]: InputType.Text\n    },\n    [_property.PropertyType.Enumer]: {\n      [_operator.Id.Eq]: InputType.SingleSelect,\n      [_operator.Id.Any]: InputType.None,\n      [_operator.Id.None]: InputType.None,\n      [_operator.Id.In]: InputType.MultiSelect\n    }\n  };\n  _exports.expectedInputTypes = expectedInputTypes;\n\n  function assertsForInputType(assert, inputType) {\n    switch (inputType) {\n      case InputType.None:\n        assert.dom('[data-test-input-box] [data-test-input]').doesNotExist();\n        assert.dom('[data-test-input-box] .ember-power-select-trigger').doesNotExist();\n        assert.dom('[data-test-input-box] .ember-power-select-multiple-trigger').doesNotExist();\n        break;\n\n      case InputType.Text:\n        assert.dom('[data-test-input-box] [data-test-input]').exists({\n          count: 1\n        });\n        assert.dom('[data-test-input-box] .ember-power-select-trigger').doesNotExist();\n        assert.dom('[data-test-input-box] .ember-power-select-multiple-trigger').doesNotExist();\n        break;\n\n      case InputType.SingleSelect:\n        assert.dom('[data-test-input-box] [data-test-input]').doesNotExist();\n        assert.dom('[data-test-input-box] .ember-power-select-trigger').exists({\n          count: 1\n        });\n        assert.dom('[data-test-input-box] .ember-power-select-multiple-trigger').doesNotExist();\n        break;\n\n      case InputType.MultiSelect:\n        assert.dom('[data-test-input-box] [data-test-input]').doesNotExist();\n        assert.dom('[data-test-input-box] .ember-power-select-trigger').exists({\n          count: 1\n        });\n        assert.dom('[data-test-input-box] .ember-power-select-multiple-trigger').exists({\n          count: 1\n        });\n        break;\n\n      default:\n    }\n  }\n});","define(\"condition-editor/tests/helpers/select\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.selectProperty = selectProperty;\n  _exports.selectOperator = selectOperator;\n\n  async function selectProperty(property) {\n    await (0, _testHelpers.click)('[data-test-property-chooser-box] .ember-power-select-trigger');\n    await (0, _testHelpers.click)(`[data-test-property-chooser=\"${property.id}\"]`);\n  }\n\n  async function selectOperator(operator) {\n    await (0, _testHelpers.click)('[data-test-operator-chooser-box] .ember-power-select-trigger');\n    await (0, _testHelpers.click)(`[data-test-operator-chooser=\"${operator}\"]`);\n  }\n});","define(\"condition-editor/tests/in-run-loop.d\", [], function () {\n  \"use strict\";\n});","define(\"condition-editor/tests/integration/components/condition-editor-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-cli-mirage/test-support\", \"condition-editor/lib/operator\", \"condition-editor/models/property\", \"condition-editor/tests/helpers/input-type\", \"condition-editor/tests/helpers/select\"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _operator, _property, _inputType, _select) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | condition-editor', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _testSupport.setupMirage)(hooks);\n    hooks.beforeEach(async function (assert) {\n      this.store = this.owner.lookup('service:store');\n      this.properties = [this.store.createRecord('property', {\n        id: 0,\n        name: 'Foo',\n        type: _property.PropertyType.String\n      }), this.store.createRecord('property', {\n        id: 1,\n        name: 'Bar',\n        type: _property.PropertyType.Number\n      }), this.store.createRecord('property', {\n        id: 2,\n        name: 'Baz',\n        type: _property.PropertyType.Enumer,\n        values: ['foo', 'bar', 'baz']\n      })];\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n                  <ConditionEditor @properties={{this.properties}} as |ce|>\n                      <span data-test-selected-property={{ce.property.id}}>{{ce.property.name}}</span>\n                      <span data-test-selected-operator={{ce.operator.id}}>{{ce.operator.text}}</span>\n                      <span data-test-input-value>{{ce.input}}</span>\n                  </ConditionEditor>\n              \n      */\n      {\n        id: \"orJDc3gH\",\n        block: \"{\\\"symbols\\\":[\\\"ce\\\"],\\\"statements\\\":[[0,\\\"\\\\n            \\\"],[5,\\\"condition-editor\\\",[],[[\\\"@properties\\\"],[[23,0,[\\\"properties\\\"]]]],{\\\"statements\\\":[[0,\\\"\\\\n                \\\"],[7,\\\"span\\\",true],[11,\\\"data-test-selected-property\\\",[23,1,[\\\"property\\\",\\\"id\\\"]]],[8],[1,[23,1,[\\\"property\\\",\\\"name\\\"]],false],[9],[0,\\\"\\\\n                \\\"],[7,\\\"span\\\",true],[11,\\\"data-test-selected-operator\\\",[23,1,[\\\"operator\\\",\\\"id\\\"]]],[8],[1,[23,1,[\\\"operator\\\",\\\"text\\\"]],false],[9],[0,\\\"\\\\n                \\\"],[7,\\\"span\\\",true],[10,\\\"data-test-input-value\\\",\\\"\\\"],[8],[1,[23,1,[\\\"input\\\"]],false],[9],[0,\\\"\\\\n            \\\"]],\\\"parameters\\\":[1]}],[0,\\\"\\\\n        \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.dom('[data-test-condition-editor]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-operator-chooser-box] .ember-power-select-trigger').doesNotExist();\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.None);\n    });\n    (0, _qunit.test)('correct input type for prop and operator', async function (assert) {\n      for (let p = 0; p < this.properties.length; p++) {\n        await (0, _select.selectProperty)(this.properties[p]);\n        assert.dom(`[data-test-selected-property=\"${this.properties[p].id}\"]`).exists({\n          count: 1\n        });\n        assert.dom('[data-test-operator-chooser-box] .ember-power-select-trigger').exists({\n          count: 1\n        });\n        (0, _inputType.assertsForInputType)(assert, _inputType.InputType.None);\n        const operators = _property.operatorMap[this.properties[p].type];\n\n        for (let o = 0; o < operators.length; o++) {\n          await (0, _select.selectOperator)(operators[o]);\n          assert.dom(`[data-test-selected-operator=\"${operators[o]}\"]`).exists({\n            count: 1\n          });\n          (0, _inputType.assertsForInputType)(assert, _inputType.expectedInputTypes[this.properties[p].type][operators[o]]);\n        }\n      }\n    });\n    (0, _qunit.test)('values yielded correctly', async function (assert) {\n      await (0, _select.selectProperty)(this.properties[0]);\n      assert.dom('[data-test-selected-property=\"0\"]').exists({\n        count: 1\n      });\n      await (0, _select.selectOperator)(_operator.Id.Eq);\n      assert.dom(`[data-test-selected-operator=\"${_operator.Id.Eq}\"]`).exists({\n        count: 1\n      });\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.Text);\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'foo');\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo');\n      await (0, _select.selectProperty)(this.properties[2]);\n      assert.dom('[data-test-selected-property=\"2\"]').exists({\n        count: 1\n      });\n      await (0, _select.selectOperator)(_operator.Id.Eq);\n      assert.dom(`[data-test-selected-operator=\"${_operator.Id.Eq}\"]`).exists({\n        count: 1\n      });\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.SingleSelect);\n      await (0, _testHelpers.click)('[data-test-input-box] .ember-power-select-trigger');\n      await (0, _testHelpers.click)('[data-test-single-select-input=\"bar\"]');\n      assert.dom('[data-test-input-value]').hasText('bar');\n      await (0, _select.selectOperator)(_operator.Id.In);\n      assert.dom(`[data-test-selected-operator=\"${_operator.Id.In}\"]`).exists({\n        count: 1\n      });\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.MultiSelect);\n      await (0, _testHelpers.click)('[data-test-input-box] .ember-power-select-trigger');\n      await (0, _testHelpers.click)('[data-test-multi-select-input=\"foo\"]');\n      assert.dom('[data-test-input-value]').hasText('foo');\n      await (0, _testHelpers.click)('[data-test-input-box] .ember-power-select-trigger');\n      await (0, _testHelpers.click)('[data-test-multi-select-input=\"bar\"]');\n      assert.dom('[data-test-input-value]').hasText('foo,bar');\n      await (0, _testHelpers.click)('[data-test-input-box] .ember-power-select-trigger');\n      await (0, _testHelpers.click)('[data-test-multi-select-input=\"baz\"]');\n      assert.dom('[data-test-input-value]').hasText('foo,bar,baz');\n    });\n    (0, _qunit.test)('clear button clears', async function (assert) {\n      await (0, _select.selectProperty)(this.properties[0]);\n      assert.dom('[data-test-selected-property=\"0\"]').exists({\n        count: 1\n      });\n      await (0, _select.selectOperator)(_operator.Id.Eq);\n      assert.dom(`[data-test-selected-operator=\"${_operator.Id.Eq}\"]`).exists({\n        count: 1\n      });\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.Text);\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'foo');\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo');\n      await (0, _testHelpers.click)('[data-test-clear-button]');\n      assert.dom('[data-test-operator-chooser-box] .ember-power-select-trigger').doesNotExist();\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.None);\n      assert.dom('[data-test-selected-property]').doesNotExist();\n      assert.dom('[data-test-selected-operator]').doesNotExist();\n      assert.dom('[data-test-input-value]').hasNoText();\n    });\n    (0, _qunit.test)('changing operators clears input', async function (assert) {\n      await (0, _select.selectProperty)(this.properties[0]);\n      assert.dom('[data-test-selected-property=\"0\"]').exists({\n        count: 1\n      });\n      await (0, _select.selectOperator)(_operator.Id.Eq);\n      assert.dom(`[data-test-selected-operator=\"${_operator.Id.Eq}\"]`).exists({\n        count: 1\n      });\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.Text);\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'foo');\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo');\n      await (0, _select.selectOperator)(_operator.Id.Contains);\n      assert.dom(`[data-test-selected-operator=\"${_operator.Id.Contains}\"]`).exists({\n        count: 1\n      });\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.Text);\n      assert.dom('[data-test-input-value]').hasNoText();\n    });\n    (0, _qunit.test)('changing properties resets operator and clears input', async function (assert) {\n      await (0, _select.selectProperty)(this.properties[0]);\n      assert.dom('[data-test-selected-property=\"0\"]').exists({\n        count: 1\n      });\n      await (0, _select.selectOperator)(_operator.Id.Eq);\n      assert.dom(`[data-test-selected-operator=\"${_operator.Id.Eq}\"]`).exists({\n        count: 1\n      });\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.Text);\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'foo');\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo');\n      await (0, _select.selectProperty)(this.properties[1]);\n      assert.dom('[data-test-input-value]').hasNoText();\n      assert.dom('[data-test-selected-operator]').doesNotExist();\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.None);\n      await (0, _select.selectOperator)(_operator.Id.Eq);\n      assert.dom(`[data-test-selected-operator=\"${_operator.Id.Eq}\"]`).exists({\n        count: 1\n      });\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.Text);\n      assert.dom('[data-test-input-value]').hasNoText();\n    });\n    (0, _qunit.test)('string validations', async function (assert) {\n      await (0, _select.selectProperty)(this.properties[0]);\n      assert.dom('[data-test-selected-property=\"0\"]').exists({\n        count: 1\n      });\n      await (0, _select.selectOperator)(_operator.Id.In);\n      assert.dom(`[data-test-selected-operator=\"${_operator.Id.In}\"]`).exists({\n        count: 1\n      });\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.Text);\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'foo');\n      assert.dom('[data-test-validation-messages]').hasNoText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo');\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'foo,,bar');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo');\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'foo, ,bar');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo');\n      await (0, _testHelpers.fillIn)('[data-test-input]', ',foo,bar');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo');\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'foo,bar,');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo');\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'foo,bar');\n      assert.dom('[data-test-validation-messages]').hasNoText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo,bar');\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'foo, bar');\n      assert.dom('[data-test-validation-messages]').hasNoText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('foo, bar');\n    });\n    (0, _qunit.test)('number validations', async function (assert) {\n      await (0, _select.selectProperty)(this.properties[1]);\n      assert.dom('[data-test-selected-property=\"1\"]').exists({\n        count: 1\n      });\n      await (0, _select.selectOperator)(_operator.Id.Eq);\n      assert.dom(`[data-test-selected-operator=\"${_operator.Id.Eq}\"]`).exists({\n        count: 1\n      });\n      (0, _inputType.assertsForInputType)(assert, _inputType.InputType.Text);\n      await (0, _testHelpers.fillIn)('[data-test-input]', '1');\n      assert.dom('[data-test-validation-messages]').hasNoText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('1');\n      await (0, _testHelpers.fillIn)('[data-test-input]', 'a');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('1');\n      await (0, _testHelpers.fillIn)('[data-test-input]', '2');\n      assert.dom('[data-test-validation-messages]').hasNoText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('2');\n      await (0, _select.selectOperator)(_operator.Id.In);\n      await (0, _testHelpers.fillIn)('[data-test-input]', '1,2,3');\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('1,2,3');\n      assert.dom('[data-test-validation-messages]').hasNoText();\n      await (0, _testHelpers.fillIn)('[data-test-input]', '1,b,3');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('1,2,3');\n      await (0, _testHelpers.fillIn)('[data-test-input]', '1, ,3');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('1,2,3');\n      await (0, _testHelpers.fillIn)('[data-test-input]', '1,,3');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('1,2,3');\n      await (0, _testHelpers.fillIn)('[data-test-input]', ',1,3');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('1,2,3');\n      await (0, _testHelpers.fillIn)('[data-test-input]', '1,3,');\n      assert.dom('[data-test-validation-messages]').hasAnyText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('1,2,3');\n      await (0, _testHelpers.fillIn)('[data-test-input]', '1,3');\n      assert.dom('[data-test-validation-messages]').hasNoText();\n      await (0, _testHelpers.triggerKeyEvent)('[data-test-input]', 'keydown', 'ENTER');\n      assert.dom('[data-test-input-value]').hasText('1,3');\n    });\n  });\n});","define(\"condition-editor/tests/integration/components/operator-chooser-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"condition-editor/lib/operator\", \"condition-editor/models/property\"], function (_qunit, _emberQunit, _testHelpers, _operator, _property) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | operator-chooser', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.store = this.owner.lookup('service:store');\n\n      this.onChange = operator => {\n        this.set('selectedOperator', operator);\n      };\n    });\n    (0, _qunit.test)('chooses operators for string properties', async function (assert) {\n      this.set('property', this.store.createRecord('property', {\n        type: _property.PropertyType.String\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <OperatorChooser\n                  @property={{this.property}}\n                  @operator={{this.selectedOperator}}\n                  @onChange={{this.onChange}}\n              />\n      */\n      {\n        id: \"1fJuSgEZ\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"operator-chooser\\\",[],[[\\\"@property\\\",\\\"@operator\\\",\\\"@onChange\\\"],[[23,0,[\\\"property\\\"]],[23,0,[\\\"selectedOperator\\\"]],[23,0,[\\\"onChange\\\"]]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.strictEqual(this.selectedOperator, undefined, 'initial');\n      const operators = _property.operatorMap[_property.PropertyType.String];\n\n      for (let i = 0; i < operators.length; i++) {\n        var _this$selectedOperato;\n\n        await (0, _testHelpers.click)('.ember-power-select-trigger');\n        await (0, _testHelpers.click)(`[data-test-operator-chooser=\"${operators[i]}\"]`);\n        assert.strictEqual((_this$selectedOperato = this.selectedOperator) === null || _this$selectedOperato === void 0 ? void 0 : _this$selectedOperato.id, operators[i], `choose: ${(0, _operator.getOperator)(operators[i]).text}`);\n      }\n\n      await (0, _testHelpers.click)('.ember-power-select-trigger');\n      assert.dom(`[data-test-operator-chooser=\"${_operator.Id.Gt}\"]`).doesNotExist(`not available: ${(0, _operator.getOperator)(_operator.Id.Gt).text}`);\n      assert.dom(`[data-test-operator-chooser=\"${_operator.Id.Lt}\"]`).doesNotExist(`not available: ${(0, _operator.getOperator)(_operator.Id.Lt).text}`);\n    });\n    (0, _qunit.test)('chooses operators for number properties', async function (assert) {\n      this.set('property', this.store.createRecord('property', {\n        type: _property.PropertyType.Number\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <OperatorChooser\n                  @property={{this.property}}\n                  @operator={{this.selectedOperator}}\n                  @onChange={{this.onChange}}\n              />\n      */\n      {\n        id: \"1fJuSgEZ\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"operator-chooser\\\",[],[[\\\"@property\\\",\\\"@operator\\\",\\\"@onChange\\\"],[[23,0,[\\\"property\\\"]],[23,0,[\\\"selectedOperator\\\"]],[23,0,[\\\"onChange\\\"]]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.strictEqual(this.selectedOperator, undefined, 'initial');\n      const operators = _property.operatorMap[_property.PropertyType.Number];\n\n      for (let i = 0; i < operators.length; i++) {\n        var _this$selectedOperato2;\n\n        await (0, _testHelpers.click)('.ember-power-select-trigger');\n        await (0, _testHelpers.click)(`[data-test-operator-chooser=\"${operators[i]}\"]`);\n        assert.strictEqual((_this$selectedOperato2 = this.selectedOperator) === null || _this$selectedOperato2 === void 0 ? void 0 : _this$selectedOperato2.id, operators[i], `choose: ${(0, _operator.getOperator)(operators[i]).text}`);\n      }\n\n      await (0, _testHelpers.click)('.ember-power-select-trigger');\n      assert.dom(`[data-test-operator-chooser=\"${_operator.Id.Contains}\"]`).doesNotExist(`not available: ${(0, _operator.getOperator)(_operator.Id.Contains).text}`);\n    });\n    (0, _qunit.test)('chooses operators for enumerated properties', async function (assert) {\n      this.set('property', this.store.createRecord('property', {\n        type: _property.PropertyType.Enumer\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <OperatorChooser\n                  @property={{this.property}}\n                  @operator={{this.selectedOperator}}\n                  @onChange={{this.onChange}}\n              />\n      */\n      {\n        id: \"1fJuSgEZ\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"operator-chooser\\\",[],[[\\\"@property\\\",\\\"@operator\\\",\\\"@onChange\\\"],[[23,0,[\\\"property\\\"]],[23,0,[\\\"selectedOperator\\\"]],[23,0,[\\\"onChange\\\"]]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.strictEqual(this.selectedOperator, undefined, 'initial');\n      const operators = _property.operatorMap[_property.PropertyType.Enumer];\n\n      for (let i = 0; i < operators.length; i++) {\n        var _this$selectedOperato3;\n\n        await (0, _testHelpers.click)('.ember-power-select-trigger');\n        await (0, _testHelpers.click)(`[data-test-operator-chooser=\"${operators[i]}\"]`);\n        assert.strictEqual((_this$selectedOperato3 = this.selectedOperator) === null || _this$selectedOperato3 === void 0 ? void 0 : _this$selectedOperato3.id, operators[i], `choose: ${(0, _operator.getOperator)(operators[i]).text}`);\n      }\n\n      await (0, _testHelpers.click)('.ember-power-select-trigger');\n      assert.dom(`[data-test-operator-chooser=\"${_operator.Id.Gt}\"]`).doesNotExist(`not available: ${(0, _operator.getOperator)(_operator.Id.Gt).text}`);\n      assert.dom(`[data-test-operator-chooser=\"${_operator.Id.Lt}\"]`).doesNotExist(`not available: ${(0, _operator.getOperator)(_operator.Id.Lt).text}`);\n      assert.dom(`[data-test-operator-chooser=\"${_operator.Id.Contains}\"]`).doesNotExist(`not available: ${(0, _operator.getOperator)(_operator.Id.Contains).text}`);\n    });\n  });\n});","define(\"condition-editor/tests/integration/components/product-table-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-cli-mirage/test-support\", \"condition-editor/lib/operator\"], function (_qunit, _emberQunit, _testHelpers, _testSupport, _operator) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | product-table', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _testSupport.setupMirage)(hooks);\n    hooks.beforeEach(async function () {\n      this.store = this.owner.lookup('service:store');\n      this.server.create('property', {\n        id: 0,\n        name: 'Foo'\n      });\n      this.server.create('property', {\n        id: 1,\n        name: 'Bar'\n      });\n      this.server.create('property', {\n        id: 2,\n        name: 'Baz'\n      });\n      this.properties = await this.store.findAll('property');\n      this.server.create('product', {\n        id: 0\n      });\n      this.server.create('product', {\n        id: 1\n      });\n      this.server.create('product', {\n        id: 2\n      });\n      this.products = await this.store.findAll('product');\n      this.properties.forEach(property => this.products.forEach(product => this.server.create('property-value', {\n        productId: parseInt(product.id, 0),\n        propertyId: parseInt(property.id, 0),\n        value: `${property.name.toLowerCase()}-${product.id}`\n      })));\n    });\n    (0, _qunit.test)('displays products', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <ProductTable @properties={{this.properties}} />\n      */\n      {\n        id: \"U/lNoBLm\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"product-table\\\",[],[[\\\"@properties\\\"],[[23,0,[\\\"properties\\\"]]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.dom('[data-test-product-table]').exists({\n        count: 1\n      });\n      this.products.forEach(product => assert.dom(`[data-test-product-row=\"${product.id}\"]`).exists({\n        count: 1\n      }));\n      this.products.forEach(product => this.properties.forEach(property => {\n        assert.dom(`[data-test-property-header=\"${property.id}\"]`).exists({\n          count: 1\n        });\n        assert.dom(`[data-test-property-header=\"${property.id}\"]`).hasText(property.name);\n        assert.dom(`[data-test-product-row=\"${product.id}\"] [data-test-property-value=\"${property.id}\"]`).exists({\n          count: 1\n        });\n        assert.dom(`[data-test-product-row=\"${product.id}\"] [data-test-property-value=\"${property.id}\"]`).hasText(product.propValsByPropId[property.id].toString());\n      }));\n    });\n    (0, _qunit.test)('filters products', async function (assert) {\n      const operator = (0, _operator.getOperator)(_operator.Id.Eq);\n      const property = this.properties.toArray()[1];\n      this.setProperties({\n        property,\n        operator\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <ProductTable\n                  @properties={{this.properties}}\n                  @property={{this.property}}\n                  @operator={{this.operator}}\n                  @filter='bar-1'\n              />\n      */\n      {\n        id: \"YloFH+x1\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"product-table\\\",[],[[\\\"@properties\\\",\\\"@property\\\",\\\"@operator\\\",\\\"@filter\\\"],[[23,0,[\\\"properties\\\"]],[23,0,[\\\"property\\\"]],[23,0,[\\\"operator\\\"]],\\\"bar-1\\\"]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.dom('[data-test-product-row=\"0\"]').doesNotExist();\n      assert.dom('[data-test-product-row=\"1\"]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row=\"2\"]').doesNotExist();\n    });\n    (0, _qunit.test)('updates product list on filter change', async function (assert) {\n      const operator = (0, _operator.getOperator)(_operator.Id.Eq);\n      const property = this.properties.toArray()[1];\n      this.setProperties({\n        property,\n        operator,\n        filter: 'bar-1'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <ProductTable\n                  @properties={{this.properties}}\n                  @property={{this.property}}\n                  @operator={{this.operator}}\n                  @filter='{{this.filter}}'\n              />\n      */\n      {\n        id: \"kP5yoxvc\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"product-table\\\",[],[[\\\"@properties\\\",\\\"@property\\\",\\\"@operator\\\",\\\"@filter\\\"],[[23,0,[\\\"properties\\\"]],[23,0,[\\\"property\\\"]],[23,0,[\\\"operator\\\"]],[29,[[23,0,[\\\"filter\\\"]]]]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.dom('[data-test-product-row=\"0\"]').doesNotExist();\n      assert.dom('[data-test-product-row=\"1\"]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row=\"2\"]').doesNotExist();\n      this.setProperties({\n        filter: 'bar-2'\n      });\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-product-row=\"0\"]').doesNotExist();\n      assert.dom('[data-test-product-row=\"1\"]').doesNotExist();\n      assert.dom('[data-test-product-row=\"2\"]').exists({\n        count: 1\n      });\n    });\n    (0, _qunit.test)('updates product list on operator change', async function (assert) {\n      const operator = (0, _operator.getOperator)(_operator.Id.Eq);\n      const property = this.properties.toArray()[1];\n      this.setProperties({\n        property,\n        operator\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <ProductTable\n                  @properties={{this.properties}}\n                  @property={{this.property}}\n                  @operator={{this.operator}}\n                  @filter='bar-1'\n              />\n      */\n      {\n        id: \"YloFH+x1\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"product-table\\\",[],[[\\\"@properties\\\",\\\"@property\\\",\\\"@operator\\\",\\\"@filter\\\"],[[23,0,[\\\"properties\\\"]],[23,0,[\\\"property\\\"]],[23,0,[\\\"operator\\\"]],\\\"bar-1\\\"]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.dom('[data-test-product-row=\"0\"]').doesNotExist();\n      assert.dom('[data-test-product-row=\"1\"]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row=\"2\"]').doesNotExist();\n      this.setProperties({\n        operator: _operator.Id.Any\n      });\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-product-row=\"0\"]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row=\"1\"]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-product-row=\"2\"]').exists({\n        count: 1\n      });\n    });\n  });\n});","define(\"condition-editor/tests/integration/components/property-chooser-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | property-chooser', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('chooses properties', async function (assert) {\n      const properties = [{\n        id: '0',\n        name: 'Foo'\n      }, {\n        id: '1',\n        name: 'Bar'\n      }, {\n        id: '2',\n        name: 'Baz'\n      }];\n\n      const onChange = property => {\n        this.selectedProperty = property;\n      };\n\n      this.setProperties({\n        properties,\n        onChange\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <PropertyChooser\n                  @properties={{this.properties}}\n                  @selected={{this.selectedProperty}}\n                  @onChange={{this.onChange}}\n              />\n      */\n      {\n        id: \"FQSAYLWY\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"property-chooser\\\",[],[[\\\"@properties\\\",\\\"@selected\\\",\\\"@onChange\\\"],[[23,0,[\\\"properties\\\"]],[23,0,[\\\"selectedProperty\\\"]],[23,0,[\\\"onChange\\\"]]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.strictEqual(this.selectedProperty, undefined, 'initial');\n\n      for (let i = 0; i < properties.length; i++) {\n        await (0, _testHelpers.click)('.ember-power-select-trigger');\n        await (0, _testHelpers.click)(`[data-test-property-chooser=\"${i}\"]`);\n        assert.strictEqual(this.selectedProperty, properties[i], properties[i].name);\n      }\n    });\n  });\n});","define(\"condition-editor/tests/test-helper\", [\"@ember/test-helpers\", \"ember-qunit\", \"condition-editor/app\", \"condition-editor/config/environment\", \"qunit-dom\"], function (_testHelpers, _emberQunit, _app, _environment, _qunitDom) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"condition-editor/tests/unit/controllers/application-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support\", \"condition-editor/mirage/util\"], function (_qunit, _emberQunit, _testSupport, _util) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _testSupport.setupMirage)(hooks);\n    (0, _qunit.test)('load properties', async function (assert) {\n      var _controller$propertie;\n\n      (0, _util.loadProperties)(this.server);\n      const controller = this.owner.lookup('controller:application');\n      await controller.loadProperties.perform();\n      assert.equal((_controller$propertie = controller.properties) === null || _controller$propertie === void 0 ? void 0 : _controller$propertie.length, 5, 'five properties loaded');\n    });\n  });\n});","define(\"condition-editor/tests/unit/instance-initializers/load-operator-names-test\", [\"condition-editor/instance-initializers/load-operator-names\", \"qunit\", \"condition-editor/lib/operator\"], function (_loadOperatorNames, _qunit, _operator) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Instance Initializer | load-operator-names', function (hooks) {\n    hooks.beforeEach(function () {\n      this.TestApplication = Ember.Application.extend();\n      this.TestApplication.instanceInitializer({\n        name: 'initializer under test',\n        initialize: _loadOperatorNames.initialize\n      });\n      this.application = this.TestApplication.create({\n        autoboot: false\n      });\n      this.instance = this.application.buildInstance();\n    });\n    hooks.afterEach(function () {\n      Ember.run(this.instance, 'destroy');\n      Ember.run(this.application, 'destroy');\n    });\n    (0, _qunit.test)('names loaded from datastore', async function (assert) {\n      await this.instance.boot();\n      window.datastore.getOperators().forEach(operator => assert.equal((0, _operator.getOperator)(operator.id).text, operator.text, `${operator.id} -> \"${operator.text}\"`));\n    });\n  });\n});","define(\"condition-editor/tests/unit/lib/operator-test\", [\"qunit\", \"ember-qunit\", \"condition-editor/lib/operator\"], function (_qunit, _emberQunit, _operator) {\n  \"use strict\";\n\n  const testMatrix = {\n    [_operator.Id.Eq]: [['a', 'a', true, 'equivalent string'], ['b', 'a', false, 'inequivalent string'], [1, '1', true, 'equivalent integer'], [2, '1', false, 'inequivalent integer'], [1.2, '1.2', true, 'equivalent float'], [1.2, '1.200', true, 'equivalent float with trailing zeroes'], [2.1, '1.1', false, 'inequivalent float'], [1, '1.0', true, 'trailing zero float input  == integer value'], [1.0, '1', true, 'integer input == trailing zero float value'], ['', '', true, 'empty string'], [undefined, 'a', false, 'undefined']],\n    [_operator.Id.Gt]: [[2, '1', true, 'greater integer'], [1, '1', false, 'equivalent integer'], [0, '1', false, 'lesser integer'], [1.3, '1.2', true, 'greater float'], [1.2, '1.2', false, 'equivalent float'], [1.1, '1.2', false, 'lesser float'], ['', '', false, 'empty string'], [undefined, '1', false, 'undefined']],\n    [_operator.Id.Lt]: [[0, '1', true, 'lesser integer'], [1, '1', false, 'equivalent integer'], [2, '1', false, 'greater integer'], [1.1, '1.2', true, 'lesser float'], [1.2, '1.2', false, 'equivalent float'], [1.3, '1.2', false, 'greater float'], ['', '', false, 'empty string'], [undefined, '1', false, 'undefined']],\n    [_operator.Id.Any]: [['a', '', true, 'string value'], [1, '', true, 'number value'], [undefined, '', false, 'undefined value']],\n    [_operator.Id.None]: [['a', '', false, 'string value'], [1, '', false, 'number value'], [undefined, '', true, 'undefined value']],\n    [_operator.Id.In]: [['foo', 'foo', true, 'single value'], ['Foo', 'foo', false, 'case sensitive'], ['foo', 'foo,bar,baz', true, 'in comma-separated list (first)'], ['bar', 'foo,bar,baz', true, 'in comma-separated list (middle)'], ['baz', 'foo,bar,baz', true, 'in comma-separated list (last)'], ['bar', 'foo, bar, baz', true, 'spaces after commas'], ['bar', 'foo ,bar ,baz', true, 'spaces before commas'], ['bar', 'foo , bar , baz', true, 'spaces around commas'], ['foo bar', 'foo foo, foo bar, foo baz', true, 'multi-word in list'], ['foo boo', 'foo foo, foo bar, foo baz', false, 'multi-word not in list'], ['foo', 'foo foo, foo bar, foo baz', false, 'single-word not in list'], ['foo bar', 'foo,bar,baz', false, 'no partial match'], [2, '1,2,3', true, 'integer in list'], [4, '1,2,3', false, 'integer not in list'], [2.0, '1.0,2.0,3.0', true, 'float in list'], [4.1, '1.0,2.0,3.0', false, 'float not in list'], [2, '1.0,2.0,3.0', true, 'trailing zero float input == integer value'], [2.0, '1,2,3', true, 'integer input == trailing zero float value']],\n    [_operator.Id.Contains]: [['foo', 'foo', true, 'exact string'], ['FoO', 'foo', true, 'exact string (case insensitive)'], ['foobarbaz', 'bar', true, 'contained string'], ['fooBaRbaz', 'bar', true, 'contained string (case insensitive)'], [1, '1', true, 'exact integer'], [111, '1', true, 'contained integer'], [1.2, '1.2', true, 'exact float'], [12.3, '2', true, 'contained float'], ['foo', 'bar', false, 'no match (string)'], [1, '2', false, 'no match (integer)'], [1.1, '2.1', false, 'no match (float)']]\n  };\n  (0, _qunit.module)('Unit | lib | operator', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    Object.entries(testMatrix).forEach(([id, cases]) => (0, _qunit.test)(id, function (assert) {\n      cases.forEach(([a, b, expected, message]) => assert.equal((0, _operator.getOperator)(id).compare(a, b), expected, message));\n    }));\n  });\n});","define(\"condition-editor/tests/unit/models/product-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | product', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('remap property values by id', function (assert) {\n      const store = this.owner.lookup('service:store');\n      const product = store.createRecord('product', {});\n      const properties = [store.createRecord('property', {\n        id: 0\n      }), store.createRecord('property', {\n        id: 1\n      }), store.createRecord('property', {\n        id: 2\n      })];\n      const propertyValues = [store.createRecord('property-value', {\n        product,\n        property: properties[2],\n        value: 'foo'\n      }), store.createRecord('property-value', {\n        product,\n        property: properties[0],\n        value: 'bar'\n      }), store.createRecord('property-value', {\n        product,\n        property: properties[1],\n        value: 'baz'\n      })];\n      propertyValues.forEach(propertyValue => {\n        if (propertyValue.property) {\n          const {\n            property: {\n              id\n            },\n            value\n          } = propertyValue;\n          assert.equal(product.propValsByPropId[id], value, `property ${id} remapped correctly`);\n        }\n      });\n    });\n  });\n});","define(\"condition-editor/tests/unit/models/property-test\", [\"qunit\", \"ember-qunit\", \"condition-editor/models/property\"], function (_qunit, _emberQunit, _property) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | property', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('string property', function (assert) {\n      const name = 'String Property';\n      const type = _property.PropertyType.String;\n      const store = this.owner.lookup('service:store');\n      const property = store.createRecord('property', {\n        name,\n        type\n      });\n      assert.equal(property.name, name, `property name is ${name}`);\n      assert.equal(property.type, type, `property is of type: ${type}`);\n      assert.notOk(property.isEnumerated, 'property is *not* enumerated');\n    });\n    (0, _qunit.test)('number property', function (assert) {\n      const name = 'Number Property';\n      const type = _property.PropertyType.Number;\n      const store = this.owner.lookup('service:store');\n      const property = store.createRecord('property', {\n        name,\n        type\n      });\n      assert.equal(property.name, name, `property name is ${name}`);\n      assert.equal(property.type, type, `property is of type: ${type}`);\n      assert.notOk(property.isEnumerated, 'property is *not* enumerated');\n    });\n    (0, _qunit.test)('enumerated property', function (assert) {\n      const name = 'Enumerated Property';\n      const type = _property.PropertyType.Enumer;\n      const store = this.owner.lookup('service:store');\n      const property = store.createRecord('property', {\n        name,\n        type\n      });\n      assert.equal(property.name, name, `property name is ${name}`);\n      assert.equal(property.type, type, `property is of type: ${type}`);\n      assert.ok(property.isEnumerated, 'property *is* enumerated');\n    });\n  });\n});","define(\"condition-editor/tests/unit/models/property-value-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | property value', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('holds value', function (assert) {\n      const value = 'foo';\n      const store = this.owner.lookup('service:store');\n      const propertyValue = store.createRecord('property-value', {\n        value\n      });\n      assert.equal(propertyValue.value, value, 'value is held');\n    });\n  });\n});","define('condition-editor/config/environment', [], function() {\n  var prefix = 'condition-editor';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('condition-editor/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingstjnxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}